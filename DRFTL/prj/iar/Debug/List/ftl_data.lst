###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        19/Jan/2021  21:39:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\core\ftl\ftl_data.c
#    Command line =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\core\ftl\ftl_data.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\Debug\List
#        -o
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "D:\Program Files\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\Debug\List\ftl_data.lst
#    Object file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\Debug\Obj\ftl_data.o
#
###############################################################################

C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\core\ftl\ftl_data.c
      1          /*********************************************************
      2           * Module name: ftl_data.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    data journal read/write.
     28           *
     29           *********************************************************/
     30          
     31          #include <core\inc\cmn.h>
     32          #include <core\inc\buf.h>
     33          #include <core\inc\ubi.h>
     34          #include <sys\sys.h>
     35          #include "ftl_inc.h"
     36          #include <stdio.h>
     37          #include <stdlib.h>
     38          
     39          #include <core\inc\ftl.h>
     40          
     41          /* journal edition for orderly replay */
     42          static UINT32 edition_in_hot_journal = 0;
     43          static UINT32 edition_in_cold_journal = 0;
     44          
     45          /* meta data */
     46          static SPARE hot_meta_data[JOURNAL_BLOCK_COUNT][PAGE_PER_PHY_BLOCK];
     47          static SPARE cold_meta_data[JOURNAL_BLOCK_COUNT][PAGE_PER_PHY_BLOCK];
     48          
     49          /* buffer used in reclaim */
     50          static SPARE pages_buffer[MPP_SIZE / sizeof(SPARE)];
     51          static UINT8 data_buffer[MPP_SIZE];
     52          static LOG_BLOCK dirty_blocks[JOURNAL_BLOCK_COUNT];
     53          
     54          extern PHY_BLOCK current_record_block;
     55          extern PAGE_OFF current_record_page;
     56          extern int max_records;
     57          extern UINT32 record_index;
     58          extern UINT32 record_cache_page[512];
     59          extern int restore_flag;
     60          extern int initial_flag;
     61          
     62          typedef unsigned char *byte_pointer;
     63          extern void show_bytes(byte_pointer start, int len);
     64          
     65          STATUS DATA_Format() {
     66            UINT32 i;
     67            LOG_BLOCK block = DATA_START_BLOCK;//46
     68            STATUS ret = STATUS_SUCCESS;
     69          
     70            /* init the bdt to all dirty */
     71            //把所有4096个物理块都标记为脏，即所有块的invalid页都为63
     72            for (i = 0; i < CFG_LOG_BLOCK_COUNT; i++) {
     73              block_dirty_table[i] = MAX_DIRTY_PAGES;
     74            }
     75          
     76            /* init the journal blocks in root table */
     77            for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {
     78              if (ret == STATUS_SUCCESS) {
     79                ret = UBI_Erase(block, block);//擦除data block区第一个块
     80              }
     81          
     82              if (ret == STATUS_SUCCESS) {
     83                PM_NODE_SET_BLOCKPAGE(root_table.hot_journal[i], block, 0);//设置root table
     84                block_dirty_table[block] = 0;//将data block区第一个块标记为净，即invalid页为0
     85                block++;
     86              }
     87            }
     88          
     89            for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {
     90              if (ret == STATUS_SUCCESS) {
     91                ret = UBI_Erase(block, block);
     92              }
     93          
     94              if (ret == STATUS_SUCCESS) {
     95                PM_NODE_SET_BLOCKPAGE(root_table.cold_journal[i], block, 0);
     96                block_dirty_table[block] = 0;
     97                block++;
     98              }
     99            }
    100          
    101            for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {
    102              if (ret == STATUS_SUCCESS) {
    103                ret = UBI_Erase(block, block);
    104              }
    105          
    106              if (ret == STATUS_SUCCESS) {
    107                PM_NODE_SET_BLOCKPAGE(root_table.reclaim_journal[i], block, 0);
    108                block_dirty_table[block] = 0;
    109                block++;
    110              }
    111            }
    112          
    113            return STATUS_SUCCESS;
    114          }
    115          
    116          STATUS DATA_Write(PGADDR addr, void* buffer, BOOL is_hot) {
    117            UINT32 i;
    118            UINT32* edition;
    119            PHY_BLOCK block;
    120            PAGE_OFF page;
    121            JOURNAL_ADDR* data_journal;
    122            SPARE* meta_data;
    123            STATUS ret = STATUS_SUCCESS;
    124            LOG_BLOCK next_block = INVALID_BLOCK;
    125          
    126            /* TODO: optimize this critical path */
    127            /* TODO: Bad Page Marker, skip the bad PAGE instead of bad BLOCK. */
    128          
    129            if (is_hot == TRUE) {
    130              data_journal = root_table.hot_journal;
    131              meta_data = &(hot_meta_data[0][0]);
    132              edition = &edition_in_hot_journal;
    133            } else {
    134              data_journal = root_table.cold_journal;
    135              meta_data = &(cold_meta_data[0][0]);
    136              edition = &edition_in_cold_journal;
    137            }
    138          
    139            /* find an idle non-full block */
    140            do {
    141              for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {
    142                if (PM_NODE_PAGE(data_journal[i]) < PAGE_PER_PHY_BLOCK - 1) {
    143                  ret = UBI_ReadStatus(PM_NODE_BLOCK(data_journal[i]));
    144                  if (ret == STATUS_SUCCESS) {
    145                    /* success means idle */
    146                    data_journal = &data_journal[i];
    147                    meta_data = meta_data + i * PAGE_PER_PHY_BLOCK;
    148                    break;
    149                  }
    150                }
    151              }
    152            } while (ret == STATUS_DIE_BUSY);
    153          
    154            ASSERT(ret == STATUS_SUCCESS);
    155            if (buffer != NULL) {
    156              block = PM_NODE_BLOCK(*data_journal);
    157              page = PM_NODE_PAGE(*data_journal);
    158          
    159              /* prepare spare data, and set in meta table */
    160              meta_data[page][0] = addr;
    161              meta_data[page][1] = (*edition);
    162              (*edition) = (*edition) + 1;
    163          
    164              /* write the page to journal block */
    165              ret = UBI_Write(block, page, buffer, meta_data[page], TRUE);
    166              
    167              
    168              
    169              // wen added
    170              // backup physical page and logical page
    171              
    172              if(addr!=240000 && addr!=240010 && addr!=240020 && addr!=240030 && addr!=240040 && addr!=240014 && addr!=240024 && addr!=240034  &&restore_flag==0 && initial_flag ==1){
    173               // uart_printf("current_record_block=%d, current_record_page=%d\n", current_record_block, current_record_page);
    174               // uart_printf("current record index = %d\n", record_index);
    175               // uart_printf("block=%d, page=%d\n", block, page);
    176                // show_bytes(buffer, 2048);
    177                if(record_index<511){
    178                  record_cache_page[record_index] = ((((block)<<PAGE_PER_BLOCK_SHIFT)+(page))<<2) + 1;
    179                  record_index += 1;
    180                } else {
    181                  // meta_data[0] = 0;
    182                  record_cache_page[record_index] = ((((block)<<PAGE_PER_BLOCK_SHIFT)+(page))<<2) + 1;
    183                  record_index = 0;
    184                  if (current_record_page == PAGE_PER_PHY_BLOCK) {
    185                    
    186                    next_block = current_record_block + 1;
    187          
    188                    
    189                    ret = UBI_Erase(next_block, next_block);
    190                    if (ret == STATUS_SUCCESS) {
    191                      current_record_page = 0;
    192                      current_record_block = next_block;
    193                    }
    194                  }
    195                  
    196                  ret = UBI_Write(current_record_block, current_record_page,
    197                                  record_cache_page, meta_data[page], FALSE);
    198                  
    199                  if (ret == STATUS_SUCCESS) {
    200                    current_record_page++;
    201                  }
    202                }
    203              }
    204             
    205              
    206          
    207          
    208              
    209              if (ret == STATUS_SUCCESS) {
    210                /* update PMT */
    211                ret = PMT_Update(addr, block, page);
    212              }
    213          
    214              if (ret == STATUS_SUCCESS) {
    215                /* update journal */
    216                PM_NODE_SET_BLOCKPAGE(*data_journal, block, page + 1);
    217              }
    218          
    219              if (PM_NODE_PAGE(*data_journal) == PAGE_PER_PHY_BLOCK - 1) {
    220                /* write meta data to last page */
    221                ret = UBI_Write(block, PAGE_PER_PHY_BLOCK - 1, meta_data, NULL, FALSE);
    222              }
    223            } else {
    224              /* no buffer, so no need to write data. Just treat it as page trim. */
    225              /* update PMT */
    226              uart_printf("no buffer \n");
    227              ret = PMT_Update(addr, INVALID_BLOCK, INVALID_PAGE);
    228            }
    229          
    230            return ret;
    231          }
    232          
    233          STATUS DATA_Commit() {
    234            STATUS ret;
    235          
    236            ret = HDI_Commit();
    237            if (ret == STATUS_SUCCESS) {
    238              ret = PMT_Commit();
    239            }
    240          
    241            if (ret == STATUS_SUCCESS) {
    242              ret = BDT_Commit();
    243            }
    244          
    245            if (ret == STATUS_SUCCESS) {
    246              ret = ROOT_Commit();
    247            }
    248          
    249            if (ret == STATUS_SUCCESS) {
    250              edition_in_hot_journal = 0;
    251              edition_in_cold_journal = 0;
    252            }
    253          
    254            return ret;
    255          }
    256          
    257          BOOL  DATA_IsFull(BOOL hot_journal) {
    258            UINT32 i;
    259            BOOL ret = TRUE;
    260          
    261            for (i = 0; i < JOURNAL_BLOCK_COUNT; i++) {
    262              if (hot_journal == TRUE) {//块中页用完返回true，没用完，返回false
    263                if (PM_NODE_PAGE(root_table.hot_journal[i]) < PAGE_PER_PHY_BLOCK - 1) {
    264                  ret = FALSE;
    265                  break;
    266                }
    267              } else {
    268                if (PM_NODE_PAGE(root_table.cold_journal[i]) < PAGE_PER_PHY_BLOCK - 1) {
    269                  ret = FALSE;
    270                  break;
    271                }
    272              }
    273            }
    274          
    275            return ret;
    276          }
    277          
    278          STATUS DATA_Reclaim(BOOL is_hot) {
    279            UINT32 i, j;
    280            UINT32* edition;
    281            UINT32 total_valid_page = 0;
    282            PAGE_OFF next_dirty_count = 0;
    283            PAGE_OFF target_dirty_count = MAX_DIRTY_PAGES;//63
    284            UINT32 found_block = 0;
    285            JOURNAL_ADDR* journal;
    286            JOURNAL_ADDR* exclude_journal;
    287            SPARE* meta_data;
    288            UINT32 total_reclaimed_page = 0;
    289            LOG_BLOCK reclaim_block;
    290            LOG_BLOCK dirty_block;
    291            PAGE_OFF reclaim_page = 0;
    292            PAGE_OFF page;
    293            SPARE* meta_data_buffer;
    294            LOG_BLOCK true_block = INVALID_BLOCK;
    295            PAGE_OFF true_page = INVALID_PAGE;
    296            SPARE spare;
    297            STATUS ret = STATUS_SUCCESS;
    298          
    299            if (is_hot == TRUE) {
    300              journal = root_table.hot_journal;
    301              exclude_journal = root_table.cold_journal;
    302              meta_data = &(hot_meta_data[0][0]);
    303              edition = &edition_in_hot_journal;
    304            } else {
    305              journal = root_table.cold_journal;
    306              exclude_journal = root_table.hot_journal;
    307              meta_data = &(cold_meta_data[0][0]);
    308              edition = &edition_in_cold_journal;
    309            }
    310          
    311            /* data reclaim process:
    312             * - flush and release all write buffer
    313             * - find the dirtiest blocks.
    314             * - copy valid pages in dirty blocks to reclaim blocks,
    315             * - update PMT and reclaim journal (keep integrity for PLR)
    316             * - erase dirtiest blocks, assign to new low EC blocks in same die
    317             * - update journals: reclaim ==> journal, dirty ==> reclaim
    318             */
    319          
    320            /* flush and release all write buffer */
    321            if (ret == STATUS_SUCCESS) {
    322              ret = UBI_Flush();
    323            }
    324          
    325            /* find the dirtiest blocks */
    326            if (ret == STATUS_SUCCESS) {
    327              while (found_block != JOURNAL_BLOCK_COUNT) {
    328                for (i = DATA_START_BLOCK; i <= DATA_LAST_BLOCK; i++) {
    329                  /* exclude journal blocks */
    330                  for (j = 0; j < JOURNAL_BLOCK_COUNT; j++) {
    331                    if (i == PM_NODE_BLOCK(exclude_journal[j])) {
    332                      /* skip the journal block */
    333                      break;
    334                    }
    335                  }
    336          
    337                  if (j < JOURNAL_BLOCK_COUNT) {
    338                    continue;
    339                  }
    340          
    341                  if (block_dirty_table[i] == target_dirty_count) {
    342                    dirty_blocks[found_block] = i;
    343                    total_valid_page += (MAX_DIRTY_PAGES - block_dirty_table[i]);
    344                    found_block++;
    345                  } else {
    346                    /* set the next target dirty count */
    347                    if (block_dirty_table[i] < target_dirty_count
    348                        && block_dirty_table[i] > next_dirty_count) {
    349                      next_dirty_count = block_dirty_table[i];
    350                    }
    351                  }
    352          
    353                  if (found_block == JOURNAL_BLOCK_COUNT) {
    354                    break;
    355                  }
    356                }
    357          
    358                /* find more dirty blocks */
    359                target_dirty_count = next_dirty_count;
    360                next_dirty_count = 0;
    361              }
    362            }
    363          
    364            if (ret == STATUS_SUCCESS) {
    365              if (total_valid_page != 0) {
    366                for (j = 0; j < JOURNAL_BLOCK_COUNT; j++) {
    367                  /* copy valid pages in dirty blocks to reclaim blocks */
    368                  /* keep integrity before PMT_Update() */
    369                  reclaim_block = PM_NODE_BLOCK(root_table.reclaim_journal[j]);
    370                  reclaim_page = 0;
    371                  dirty_block = dirty_blocks[j];
    372                  meta_data_buffer = meta_data + j * PAGE_PER_PHY_BLOCK;
    373          
    374                  ret = UBI_Read(dirty_block, PAGE_PER_PHY_BLOCK - 1, pages_buffer, NULL);
    375                  if (ret == STATUS_SUCCESS) {
    376                    for (page = 0; page < PAGE_PER_PHY_BLOCK - 1; page++) {
    377                      if (ret == STATUS_SUCCESS) {
    378                        ret = PMT_Search(pages_buffer[page][0], &true_block, &true_page);//查找各逻辑地址I所对应的块、页号
    379                      }
    380          
    381                      if (ret == STATUS_SUCCESS) {
    382                        if (true_block == dirty_block && true_page == page) {//若是valid页
    383                          /* this page is valid */
    384                          /* copy valid page to reclaim block */
    385                          ret = UBI_Read(dirty_block, page, data_buffer, spare);
    386                          if (ret == STATUS_SUCCESS) {
    387                            /* logical page address is not changed */
    388                            spare[1] = total_reclaimed_page;
    389          
    390                            ret = UBI_Write(reclaim_block, reclaim_page, data_buffer,
    391                                            spare, FALSE);
    392                          }
    393          
    394                          if (ret == STATUS_SUCCESS) {
    395                            /* update pmt */
    396                            ret = PMT_Update(pages_buffer[page][0], reclaim_block,
    397                                             reclaim_page);
    398          
    399                            /* check logical page address */
    400                            ASSERT(spare[0] == pages_buffer[page][0]);
    401                            /* check edition number */
    402                            ASSERT(spare[1] == total_reclaimed_page);
    403          
    404                            /* update meta data */
    405                            meta_data_buffer[reclaim_page][0] = spare[0];
    406                            meta_data_buffer[reclaim_page][1] = spare[1];
    407                          }
    408          
    409                          if (ret == STATUS_SUCCESS) {
    410                            reclaim_page++;
    411                            total_reclaimed_page++;
    412          
    413                            /* update journals */
    414                            PM_NODE_SET_BLOCKPAGE(root_table.reclaim_journal[j],
    415                                                  reclaim_block, reclaim_page);
    416                          }
    417                        }
    418                      }
    419                    }
    420                  }
    421                }
    422          
    423                ASSERT(total_valid_page == total_reclaimed_page);
    424          
    425                /* copied all valid page in all dirty blocks.
    426                 * Erase dirtiest blocks, assign to new low EC blocks in different
    427                 * dice, and update journals: reclaim ==> journal, dirty ==> reclaim
    428                 */
    429                for (j = 0; j < JOURNAL_BLOCK_COUNT; j++) {
    430                  if (ret == STATUS_SUCCESS) {
    431                    ret = UBI_Erase(dirty_blocks[j], j);
    432                  }
    433          
    434                  if (ret == STATUS_SUCCESS) {
    435                    journal[j] = root_table.reclaim_journal[j];
    436                    PM_NODE_SET_BLOCKPAGE(root_table.reclaim_journal[j], dirty_blocks[j],0);
    437          
    438                    /* update blocks: origin journal - not changed
    439                     *                origin dirty   - clear all dirty
    440                     *                origin reclaim - not changed, and shoudl be 0
    441                     */
    442                    block_dirty_table[dirty_blocks[j]] = 0;
    443                    block_dirty_table[PM_NODE_BLOCK(journal[j])] = 0;
    444                  }
    445                }
    446              } else {
    447                /* erase dirty blocks, update journals, and no need to copy pages */
    448                for (j = 0; j < JOURNAL_BLOCK_COUNT; j++) {
    449                  if (ret == STATUS_SUCCESS) {
    450                    ret = UBI_Erase(dirty_blocks[j], j);
    451                  }
    452          
    453                  if (ret == STATUS_SUCCESS) {
    454                    /* dirty ==> journal, reclaim unchanged */
    455                    PM_NODE_SET_BLOCKPAGE(journal[j], dirty_blocks[j], 0);
    456          
    457                    /* BDT: clear dirty (now journal) */
    458                    block_dirty_table[dirty_blocks[j]] = 0;
    459                  }
    460                }
    461              }
    462            }
    463          
    464            if (ret == STATUS_SUCCESS) {
    465              (*edition) = total_valid_page;
    466            }
    467          
    468            return ret;
    469          }
    470          
    471          STATUS DATA_Replay(JOURNAL_ADDR* journals) {
    472            UINT32 journal_edition = 0;
    473            UINT32 j_index = 0;
    474            SPARE* meta_data;
    475            LOG_BLOCK block;
    476            PAGE_OFF page;
    477            SPARE spare;
    478            UINT32 page_edition;
    479            PGADDR logical_page_address;
    480            SPARE* meta_data_buffer;
    481            STATUS ret = STATUS_SUCCESS;
    482          
    483            if (journals == root_table.hot_journal) {
    484              meta_data = &(hot_meta_data[0][0]);
    485            } else {
    486              meta_data = &(cold_meta_data[0][0]);
    487            }
    488          
    489            while (journal_edition != MAX_UINT32) {
    490              for (j_index = 0; j_index < JOURNAL_BLOCK_COUNT; j_index++) {//1
    491                block = PM_NODE_BLOCK(journals[j_index]);
    492                page = PM_NODE_PAGE(journals[j_index]);
    493          
    494                if (ret == STATUS_SUCCESS) {
    495                  ret = UBI_Read(block, page, NULL, spare);
    496                }
    497          
    498                if (ret == STATUS_SUCCESS) {
    499                  /* this page was written, replay it */
    500                  logical_page_address = spare[0];
    501                  page_edition = spare[1];
    502          
    503                  if (page_edition != journal_edition) {
    504                    /* replay pages in the edition order */
    505                    continue;
    506                  }
    507                  /* update PMT */
    508                  ret = PMT_Update(logical_page_address, block, page);
    509                }
    510          
    511                if (ret == STATUS_SUCCESS) {
    512                  /* update journal */
    513                  PM_NODE_SET_BLOCKPAGE(journals[j_index], block, page + 1);
    514          
    515                  /* find next edition of journal */
    516                  journal_edition++;
    517                  break;
    518                } else {
    519                  /* restore the edition */
    520                  if (journals == root_table.hot_journal) {
    521                    edition_in_hot_journal = journal_edition;
    522                  } else {
    523                    edition_in_cold_journal = journal_edition;
    524                  }
    525          
    526                  /* empty page in this journal block */
    527                  journal_edition = MAX_UINT32;
    528                  ret = STATUS_SUCCESS;
    529                  continue;
    530                }
    531              }
    532            }
    533          
    534            /* build up the meta table */
    535            for (j_index = 0; j_index < JOURNAL_BLOCK_COUNT; j_index++) {//1
    536              block = PM_NODE_BLOCK(journals[j_index]);
    537          
    538              /* point to the right meta data address */
    539              meta_data_buffer = meta_data + j_index * PAGE_PER_PHY_BLOCK;
    540          
    541              for (page = 0; page < PAGE_PER_PHY_BLOCK; page++) {
    542                if (ret == STATUS_SUCCESS) {
    543                  ret = UBI_Read(block, page, NULL, spare);
    544                }
    545          
    546                if (ret == STATUS_SUCCESS) {
    547                  meta_data_buffer[page][0] = spare[0];
    548                  meta_data_buffer[page][1] = spare[1];
    549                } else if (page == PAGE_PER_PHY_BLOCK - 1) {
    550                  /* write meta data to last page */
    551                  ret = UBI_Write(block, PAGE_PER_PHY_BLOCK - 1, meta_data_buffer, NULL,FALSE);
    552                } else {
    553                  ret = STATUS_SUCCESS;
    554                  break;
    555                }
    556              }
    557            }
    558          
    559            return ret;
    560          }
    561          
    562          STATUS Reclaim_block(UINT32 block_num, UINT32 total_valid_page){
    563            LOG_BLOCK dirty_block;
    564            PAGE_OFF page;
    565            LOG_BLOCK true_block = INVALID_BLOCK;
    566            PAGE_OFF true_page = INVALID_PAGE;
    567            SPARE spare;
    568            STATUS ret = STATUS_SUCCESS;
    569            
    570            if (total_valid_page != 0) {
    571              dirty_block = block_num;
    572              // meta_data_buffer = meta_data + j * PAGE_PER_PHY_BLOCK;
    573          
    574              ret = UBI_Read(dirty_block, PAGE_PER_PHY_BLOCK - 1, pages_buffer, NULL);
    575              if (ret == STATUS_SUCCESS) {
    576                for (page = 0; page < PAGE_PER_PHY_BLOCK - 1; page++) {
    577                  if (ret == STATUS_SUCCESS) {
    578                    ret = PMT_Search(pages_buffer[page][0], &true_block, &true_page);//查找各逻辑地址I所对应的块、页号
    579                  }
    580          
    581                  if (ret == STATUS_SUCCESS) {
    582                    if (true_block == dirty_block && true_page == page) {//若是valid页
    583                      /* this page is valid */
    584                      /* copy valid page to reclaim block */
    585                      ret = UBI_Read(dirty_block, page, data_buffer, spare);
    586          
    587                      if (ret == STATUS_SUCCESS) {
    588                        /* write buffer */
    589                        ret = FTL_Write(pages_buffer[page][0], data_buffer);
    590                      }
    591          
    592                    }
    593                  }
    594                }
    595              }
    596              
    597              if (ret == STATUS_SUCCESS) {
    598                ret = UBI_Erase(dirty_block, dirty_block);
    599              }
    600            } else {       // 会擦除完全未使用的块，对结果应该没影响
    601              /* erase dirty blocks, update journals, and no need to copy pages */
    602              ret = UBI_Erase(block_num, block_num);
    603            }
    604              
    605          
    606            return ret;
    607          }
    608          
    609          STATUS Threshold_DATA_Reclaim(void) {
    610            UINT32 i;
    611            UINT32 total_valid_page = 0;
    612            STATUS ret = STATUS_SUCCESS;
    613            
    614            UINT32 threshold = 20;
    615          
    616            /* data reclaim process:
    617             * - flush and release all write buffer
    618             * - find the dirtiest blocks.
    619             * - copy valid pages in dirty blocks to reclaim blocks,
    620             * - update PMT and reclaim journal (keep integrity for PLR)
    621             * - erase dirtiest blocks, assign to new low EC blocks in same die
    622             * - update journals: reclaim ==> journal, dirty ==> reclaim
    623             */
    624          
    625            /* flush and release all write buffer */
    626            if (ret == STATUS_SUCCESS) {
    627              ret = UBI_Flush();
    628            }
    629          
    630            /* find the dirtiest blocks */
    631          
    632            
    633            if (ret == STATUS_SUCCESS) {
    634              for (i = DATA_START_BLOCK; i <= DATA_LAST_BLOCK; i++) {
    635                if (i == PM_NODE_BLOCK(root_table.hot_journal[0]) || i == PM_NODE_BLOCK(root_table.cold_journal[0])){
    636                  continue;
    637                }
    638                if (block_dirty_table[i] >= threshold){
    639                  total_valid_page = MAX_DIRTY_PAGES - block_dirty_table[i];
    640                  Reclaim_block(i, total_valid_page);
    641                }
    642              }
    643            }
    644          
    645            return ret;
    646          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DATA_Commit
         8   -> BDT_Commit
         8   -> HDI_Commit
         8   -> PMT_Commit
         8   -> ROOT_Commit
      16   DATA_Format
        16   -> UBI_Erase
       8   DATA_IsFull
      72   DATA_Reclaim
        72   -> PMT_Search
        72   -> PMT_Update
        72   -> UBI_Erase
        72   -> UBI_Flush
        72   -> UBI_Read
        72   -> UBI_Write
      40   DATA_Replay
        40   -> PMT_Update
        40   -> UBI_Read
        40   -> UBI_Write
      40   DATA_Write
        40   -> PMT_Update
        40   -> UBI_Erase
        40   -> UBI_ReadStatus
        40   -> UBI_Write
        40   -> uart_printf
      32   Reclaim_block
        32   -> FTL_Write
        32   -> PMT_Search
        32   -> UBI_Erase
        32   -> UBI_Read
      16   Threshold_DATA_Reclaim
        16   -> Reclaim_block
        16   -> UBI_Flush
      40   printint
        40   -> UartWrite
        40 __aeabi_uidiv
        40 __aeabi_uidivmod
      56   printuint
        56   -> UartWrite
        56 __aeabi_uidiv
        56 __aeabi_uidivmod
      40   uart_printf
        40   -> UartWrite
        40   -> printint
        40   -> printuint


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable4
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       4  ??DataTable8
       8  ?_0
      12  ?_1
      68  DATA_Commit
     196  DATA_Format
      66  DATA_IsFull
     700  DATA_Reclaim
     286  DATA_Replay
     516  DATA_Write
     166  Reclaim_block
      98  Threshold_DATA_Reclaim
     512  cold_meta_data
    2048  data_buffer
      20  digits
      20  digits
       4  dirty_blocks
       4  edition_in_cold_journal
       4  edition_in_hot_journal
     512  hot_meta_data
    2048  pages_buffer
     104  printint
      64  printuint
     210  uart_printf

 
 5 132 bytes in section .bss
    40 bytes in section .data
    20 bytes in section .rodata
 2 666 bytes in section .text
 
 2 666 bytes of CODE  memory
    20 bytes of CONST memory
 5 172 bytes of DATA  memory

Errors: none
Warnings: none
