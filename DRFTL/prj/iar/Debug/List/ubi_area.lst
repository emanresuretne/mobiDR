###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        19/Jan/2021  21:39:48
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\core\ubi\ubi_area.c
#    Command line =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\core\ubi\ubi_area.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\Debug\List
#        -o
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "D:\Program Files\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\Debug\List\ubi_area.lst
#    Object file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\prj\iar\Debug\Obj\ubi_area.o
#
###############################################################################

C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl―2016.4.6\nsac-hiftl\core\ubi\ubi_area.c
      1          /*********************************************************
      2           * Module name: ubi_area.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    Manage area table in ram and nand.
     28           *
     29           *********************************************************/
     30          
     31          #include <core\inc\cmn.h>
     32          #include <core\inc\mtd.h>
     33          #include <sys\sys.h>
     34          #include "ubi_inc.h"
     35          
     36          typedef struct {
     37            PHY_BLOCK physical_block;
     38            ERASE_COUNT physical_block_ec;
     39          } AREA_BLOCK;
     40          
     41          /* in var area */
     42          static PAGE_OFF area_offset_table[AREA_TABLE_SIZE];
     43          static AREA_BLOCK cached_area_table[CFG_PHY_BLOCK_PER_AREA];//CFG_PHY_BLOCK_PER_AREA=256
     44          
     45          static AREA cached_area_number;
     46          //static char uart_buf[64];
     47          
     48          STATUS AREA_Init(AREA area_index) {
     49            STATUS ret;
     50          
     51            /* check the type defination */
     52            ASSERT(sizeof(PHY_BLOCK) == sizeof(ERASE_COUNT));
     53            ASSERT(sizeof(PHY_BLOCK) == sizeof(PAGE_OFF));
     54          
     55            /* find the offset of the area table */
     56            cached_area_number = INVALID_AREA;
     57            area_offset_table[area_index] = INVALID_PAGE;
     58            ret = AREA_Read(area_index);
     59          
     60            return ret;
     61          }
     62          
     63          PHY_BLOCK AREA_Format(PHY_BLOCK block_count, PHY_BLOCK fmt_current_block,
     64                                AREA area) {
     65            UINT32 i;
     66            STATUS ret = STATUS_SUCCESS;
     67          
     68            memset(&cached_area_table[0], 0xff, MPP_SIZE);
     69          
     70            /* check blocks, log bad block in anchor_table. Program AREA table */
     71            for (i = 0; i < block_count; fmt_current_block++) {
     72              if (fmt_current_block < CFG_LOG_BLOCK_COUNT) {
     73                if (ANCHOR_IsBadBlock(fmt_current_block) == FALSE) {
     74                  ret = MTD_Erase(fmt_current_block);
     75                  if (ret != STATUS_SUCCESS) {
     76                    /* mark bad block */
     77                    ANCHOR_LogBadBlock(fmt_current_block);
     78                  }
     79                } else {
     80                  ret = STATUS_BADBLOCK;
     81                }
     82              } else {
     83                break;
     84              }
     85          
     86              if (ret == STATUS_SUCCESS) {
     87                /* good block, trace in zone table */
     88                cached_area_table[i].physical_block = fmt_current_block;
     89                cached_area_table[i].physical_block_ec = 0;
     90                i++;
     91              }
     92            }
     93             //把最后一个area的不足256块的剩余部分置为全ff
     94            for (i = block_count; i < CFG_PHY_BLOCK_PER_AREA; i++) {
     95              /* set all remaining invalid */
     96              cached_area_table[i].physical_block = INVALID_BLOCK;
     97              cached_area_table[i].physical_block_ec = INVALID_EC;
     98            }
     99          
    100            /* write area table, with EC sector, check and erase block first */
    101            if (ret == STATUS_SUCCESS) {
    102              while (ANCHOR_IsBadBlock(fmt_current_block) == TRUE) {
    103                fmt_current_block++;
    104              }
    105              ret = MTD_Erase(fmt_current_block);
    106            }
    107          
    108            if (ret == STATUS_SUCCESS) {
    109              ret = TABLE_Write(fmt_current_block, 0, &cached_area_table);
    110              //uart_printf("%s: write %d area table to %d phy block\r\n",__func__,area,fmt_current_block);
    111            }
    112          
    113            if (ret == STATUS_SUCCESS) {
    114              /* log the area table in index */
    115              index_table.area_index_table[area] = fmt_current_block;
    116              index_table.area_index_ect[area] = 0;
    117              /* log the area offset table */
    118              area_offset_table[area] = 0;
    119              fmt_current_block++;
    120            } else {
    121              /* mark bad block, pick another block for area table. */
    122              ANCHOR_LogBadBlock(fmt_current_block);
    123              fmt_current_block = INVALID_BLOCK;
    124            }
    125            return fmt_current_block;
    126          }
    127          
    128          BOOL AREA_IsFull(PHY_BLOCK logical_block) {
    129            STATUS status;
    130            BOOL ret = FALSE;
    131            AREA area = AREA_INDEX(logical_block);
    132          
    133            status = AREA_Read(area);
    134            if (status == STATUS_SUCCESS) {
    135              /* offset is the current offset, so, -1 */
    136              //判断该area的area block页是否已用完
    137              if (area_offset_table[area] == PAGE_PER_PHY_BLOCK - 1) {
    138                ret = TRUE;
    139              }
    140            }
    141            return ret;
    142          }
    143          
    144          BLOCK_OFF AREA_FindMinECBlock(AREA area, PHY_BLOCK* physical_block,
    145                                        ERASE_COUNT* block_ec) {
    146            STATUS status;
    147            BLOCK_OFF i;
    148            BLOCK_OFF min_block_offset = 0;
    149          
    150            status = AREA_Read(area);
    151            if (status == STATUS_SUCCESS) {
    152              /* find the min ec block */
    153              for (i = 0; i < CFG_PHY_BLOCK_PER_AREA; i++) {
    154                if (cached_area_table[i].physical_block_ec
    155                    < cached_area_table[min_block_offset].physical_block_ec) {
    156                  min_block_offset = i;
    157                }
    158              }
    159          
    160              *physical_block = cached_area_table[min_block_offset].physical_block;
    161              *block_ec = cached_area_table[min_block_offset].physical_block_ec;
    162            }
    163          
    164            return min_block_offset;
    165          }
    166          
    167          BOOL AREA_CheckUpdatePLR(PHY_BLOCK logical_block, PHY_BLOCK origin_block,
    168                                   ERASE_COUNT block_ec) {
    169            BOOL need_plr = FALSE;
    170            BLOCK_OFF block_offset = BLOCK_OFFSET_AREA(logical_block);
    171          
    172            /* the area has already been cached in ram table */
    173            if (cached_area_table[block_offset].physical_block == origin_block
    174                && cached_area_table[block_offset].physical_block_ec == block_ec) {
    175              /* no need to update the area table */
    176              ;
    177            } else {
    178              /* the area table is not updated correctly for PL, continue updating */
    179              cached_area_table[block_offset].physical_block = origin_block;
    180              cached_area_table[block_offset].physical_block_ec = block_ec;
    181              need_plr = TRUE;
    182            }
    183            return need_plr;
    184          }
    185          
    186          STATUS AREA_Update(PHY_BLOCK logical_block, PHY_BLOCK new_origin_block,
    187                             ERASE_COUNT new_origin_ec) {
    188            AREA area;
    189            BLOCK_OFF block;
    190            PAGE_OFF page = INVALID_PAGE;
    191            STATUS ret;
    192          
    193            block = BLOCK_OFFSET_AREA(logical_block);
    194            area = AREA_INDEX(logical_block);
    195          
    196            ret = AREA_Read(area);
    197            if (ret == STATUS_SUCCESS) {
    198              if (new_origin_block != INVALID_BLOCK) {
    199                cached_area_table[block].physical_block = new_origin_block;
    200                cached_area_table[block].physical_block_ec = new_origin_ec;
    201              }
    202          
    203              /* set the next area page offset */
    204              page = (area_offset_table[area] + 1) % PAGE_PER_PHY_BLOCK;
    205              ret = TABLE_Write(index_table.area_index_table[area], page,
    206                                &cached_area_table);
    207            }
    208          
    209            if (ret == STATUS_SUCCESS) {
    210              ASSERT(page != INVALID_PAGE);
    211              area_offset_table[area] = page;
    212            } else if (ret == STATUS_BADBLOCK) {
    213              /* bad block, set the offset to toggle reclaim of the area table block */
    214              area_offset_table[area] = PAGE_PER_PHY_BLOCK - 1;
    215              index_table.area_index_ect[area] = INVALID_EC;
    216            }
    217            return ret;
    218          }
    219          
    220          /*
    221          OUT: physical block index
    222          IN: logic block index
    223          */
    224          PHY_BLOCK AREA_GetBlock(LOG_BLOCK logical_block) {
    225            AREA area;
    226            STATUS status;
    227            PHY_BLOCK block;
    228            PHY_BLOCK ret = INVALID_BLOCK;
    229          
    230            block = BLOCK_OFFSET_AREA(logical_block); // block identifes where is the entry of the mapping from the corresponding area table
    231            area = AREA_INDEX(logical_block); // area identifies where is the corresponding area table
    232          
    233            status = AREA_Read(area);
    234            if (status == STATUS_SUCCESS) {
    235              ret = cached_area_table[block].physical_block;
    236            }
    237          
    238            return ret;
    239          }
    240          
    241          ERASE_COUNT AREA_GetEC(PHY_BLOCK logical_block) {
    242            AREA area;
    243            STATUS status;
    244            PHY_BLOCK block;
    245            ERASE_COUNT ret = INVALID_EC;
    246          
    247            block = BLOCK_OFFSET_AREA(logical_block);
    248            area = AREA_INDEX(logical_block);
    249          
    250            status = AREA_Read(area);
    251            if (status == STATUS_SUCCESS) {
    252              ret = cached_area_table[block].physical_block_ec;
    253            }
    254          
    255            return ret;
    256          }
    257          
    258          STATUS AREA_Read(AREA area) {
    259            STATUS ret = STATUS_SUCCESS;
    260          
    261            if (area != cached_area_number) {
    262              ASSERT(area != INVALID_AREA);
    263              ret = TABLE_Read(index_table.area_index_table[area],
    264                               &(area_offset_table[area]), &(cached_area_table[0]));
    265            }
    266            if (ret == STATUS_SUCCESS) {
    267              cached_area_number = area;
    268            } else {
    269              cached_area_number = INVALID_AREA;
    270            }
    271            return ret;
    272          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   AREA_CheckUpdatePLR
        16 __aeabi_uidivmod
      16   AREA_FindMinECBlock
        16   -> AREA_Read
      24   AREA_Format
        24   -> ANCHOR_IsBadBlock
        24   -> ANCHOR_LogBadBlock
        24   -> MTD_Erase
        24   -> TABLE_Write
        24   -> __aeabi_memset
      16   AREA_GetBlock
        16   -> AREA_Read
        16 __aeabi_uidivmod
      16   AREA_GetEC
        16   -> AREA_Read
        16 __aeabi_uidivmod
       8   AREA_Init
         8   -> AREA_Read
      16   AREA_IsFull
        16   -> AREA_Read
       8   AREA_Read
         8   -> TABLE_Read
      24   AREA_Update
        24   -> AREA_Read
        24   -> TABLE_Write
        24 __aeabi_uidivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
      66  AREA_CheckUpdatePLR
      82  AREA_FindMinECBlock
     254  AREA_Format
      46  AREA_GetBlock
      48  AREA_GetEC
      32  AREA_Init
      38  AREA_IsFull
      72  AREA_Read
     168  AREA_Update
     512  area_offset_table
       4  cached_area_number
    2048  cached_area_table

 
 2 564 bytes in section .bss
   830 bytes in section .text
 
   830 bytes of CODE memory
 2 564 bytes of DATA memory

Errors: none
Warnings: none
