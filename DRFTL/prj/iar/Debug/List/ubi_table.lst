###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        19/Jan/2021  21:39:48
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\core\ubi\ubi_table.c
#    Command line =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\core\ubi\ubi_table.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\List
#        -o
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "D:\Program Files\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\List\ubi_table.lst
#    Object file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\Obj\ubi_table.o
#
###############################################################################

C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\core\ubi\ubi_table.c
      1          /*********************************************************
      2           * Module name: ubi_table.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    Basic function of table read/write.
     28           *
     29           *********************************************************/
     30          
     31          #include <core\inc\cmn.h>
     32          #include <core\inc\mtd.h>
     33          #include <sys\sys.h>
     34          #include "ubi_inc.h"
     35          
     36          /*
     37          write a page of table entries
     38          */
     39          STATUS TABLE_Write(PHY_BLOCK block, PAGE_OFF page, void* buffer) {
     40            STATUS ret;
     41            SPARE footprint;
     42          
     43            /* set footprint in spare data: mark 0 in first byte */
     44            footprint[0] = 0;
     45          
     46            /* write table, and footprint to mtd */
     47            ret = MTD_Program(block, page, buffer, footprint);
     48            if (ret == STATUS_SUCCESS) {
     49              ret = MTD_WaitReady(block);
     50            }
     51          
     52            return ret;
     53          }
     54          
     55          /*
     56          read a page of table entries
     57          how?
     58          */
     59          STATUS TABLE_Read(PHY_BLOCK block, PAGE_OFF* page, void* buffer) {
     60            PAGE_OFF head = 0;
     61            PAGE_OFF tail = PAGE_PER_PHY_BLOCK;
     62            PAGE_OFF mid;
     63            STATUS ret;
     64            SPARE footprint;
     65          
     66            ASSERT(page != NULL);
     67            if (*page != INVALID_PAGE) {
     68              tail = head = *page;
     69            }
     70          
     71            /* binary search in block, and read the valid table */
     72            mid = (head + tail) / 2;
     73            while (mid != head && mid != tail) {
     74              /* read in the mid page. Only read spare data as table's footprint */
     75              ret = MTD_Read(block, mid, NULL, footprint);
     76              if (ret == STATUS_SUCCESS) {
     77                if (footprint[0] == (UINT32) (-1)) {
     78                  /* ALL Fs, empty page, search upward */
     79                  tail = mid;
     80                } else {
     81                  /* valid page, search downward */
     82                  head = mid;
     83                }
     84              } else {
     85                /* read failed, should be an ecc error, and may be cause by PL,
     86                 * so, search upward.
     87                 */
     88                tail = mid;
     89              }
     90          
     91              mid = (head + tail) / 2;
     92            }
     93          
     94            ASSERT(tail == head || tail == head + 1);
     95            *page = mid;
     96          
     97            /* read out the page on head to QUEUE_TABLE */
     98            ret = MTD_Read(block, *page, buffer, footprint);
     99            if (ret == STATUS_SUCCESS) {
    100              if (footprint[0] == (UINT32) (-1)) {
    101                /* all Fs, empty page */
    102                ret = STATUS_FAILURE;
    103              }
    104            }
    105          
    106            if (ret != STATUS_SUCCESS) {
    107              *page = INVALID_PAGE;
    108            }
    109          
    110            return ret;
    111          }
    112          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   TABLE_Read
        40   -> MTD_Read
      16   TABLE_Write
        16   -> MTD_Program
        16   -> MTD_WaitReady


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     168  TABLE_Read
      36  TABLE_Write

 
 204 bytes in section .text
 
 204 bytes of CODE memory

Errors: none
Warnings: none
