###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        19/Jan/2021  21:39:48
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\core\ubi\ubi_anchor.c
#    Command line =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\core\ubi\ubi_anchor.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\List
#        -o
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "D:\Program Files\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\List\ubi_anchor.lst
#    Object file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\Obj\ubi_anchor.o
#
###############################################################################

C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\core\ubi\ubi_anchor.c
      1          /*********************************************************
      2           * Module name: ubi_anchor.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    anchor block.
     28           *
     29           *********************************************************/
     30          
     31          #include <core\inc\cmn.h>
     32          #include <core\inc\mtd.h>
     33          #include <sys\sys.h>
     34          #include "ubi_inc.h"
     35          
     36          /*********************************************************
     37           * Funcion Name: anchor_find_next_block
     38           *
     39           * Description:
     40           *    get a free and good block in anchor block region.
     41           *
     42           * Return Value:
     43           *    STATUS      S/F
     44           *
     45           * Parameter List:
     46           *    current_block  IN/OUT   the current block, and the
     47           *                            next free good block as
     48           *                            return value.
     49           *
     50           * NOTES:
     51           *    N/A
     52           *
     53           *********************************************************/
     54          static STATUS anchor_find_next_block(PHY_BLOCK* current_block);
     55          
     56          ANCHOR_TABLE anchor_table;
     57          
     58          /* anchor block tracker, the first blocks are reserved as anchor blocks. */
     59          static PHY_BLOCK anchor_block = 0;
     60          static PAGE_OFF anchor_next_page = 0;
     61          
     62          STATUS ANCHOR_Format(PHY_BLOCK total_data_block) {
     63            LOG_BLOCK b;
     64            STATUS ret;
     65          
     66            anchor_block = ANCHOR_FIRST_BLOCK;
     67            anchor_next_page = 0;
     68          
     69            anchor_table.total_data_block = total_data_block;
     70            anchor_table.previous_anchor_block = INVALID_BLOCK;
     71            anchor_table.swl_current_area = 0;
     72            memcpy(anchor_table.oath, ANCHOR_OATH, 11);
     73            anchor_table.version = ANCHOR_VERSION;
     74          
     75            /* ERASE all anchor blocks */
     76            for (b = ANCHOR_FIRST_BLOCK; b <= ANCHOR_LAST_BLOCK; b++) {
     77              if (ANCHOR_IsBadBlock(b) == FALSE) {
     78                ret = MTD_Erase(b);
     79                if (ret != STATUS_SUCCESS) {
     80                  /* mark bad block */
     81                  ANCHOR_LogBadBlock(b);
     82                }
     83              }
     84            }
     85            return ANCHOR_Update();
     86          }
     87          
     88          STATUS ANCHOR_Init() {
     89            PHY_BLOCK block;
     90            PHY_BLOCK previous_block1 = INVALID_BLOCK;
     91            PAGE_OFF anchor_page1 = INVALID_PAGE;
     92            PHY_BLOCK anchor_block1 = INVALID_BLOCK;
     93            PAGE_OFF anchor_current_page;
     94            PHY_BLOCK old_block;
     95            STATUS ret;
     96          
     97            /* set the default anchor table, and all other tables */
     98            memset(&anchor_table, 0xff, MPP_SIZE);
     99            memset(&index_table, 0xff, MPP_SIZE);
    100          
    101            /* TODO: validate BBR issue in anchor blocks:
    102             * may find anchor table in MANY blocks. Choose the updated one according to
    103             * the plr info of anchor block reclaim.
    104             */
    105            for (block = ANCHOR_FIRST_BLOCK; block <= ANCHOR_LAST_BLOCK; block++) {
    106              /* try to read the 1st page to see if the block is empty or not */
    107              anchor_current_page = 0;
    108              ret = TABLE_Read(block, &anchor_current_page, NULL);
    109              if (ret == STATUS_SUCCESS) {
    110                /* read anchor table from the last valid page */
    111                anchor_current_page = INVALID_PAGE;
    112                ret = TABLE_Read(block, &anchor_current_page, &anchor_table);
    113              }
    114          
    115              if (ret == STATUS_SUCCESS) {
    116                if (anchor_block1 == INVALID_BLOCK) {
    117                  anchor_block1 = block;
    118                  anchor_page1 = anchor_current_page;
    119                  previous_block1 = anchor_table.previous_anchor_block;
    120                } else {
    121                  if (previous_block1 == block) {
    122                    /* the first found block is the updated block */
    123                    old_block = block;
    124                  } else {
    125                    /* this block is the updated anchor block */
    126                    ASSERT(anchor_block1 == anchor_table.previous_anchor_block);
    127                    anchor_block1 = block;
    128                    anchor_page1 = anchor_current_page;
    129                    old_block = anchor_table.previous_anchor_block;
    130                  }
    131                  /* erase the out of date block */
    132                  if (old_block != INVALID_BLOCK) {
    133                    ret = MTD_Erase(old_block);
    134                    if (ret != STATUS_SUCCESS) {
    135                      ANCHOR_LogBadBlock(old_block);
    136                    }
    137                  }
    138                  /* only two blocks may have anchor table, so break now */
    139                  break;
    140                }
    141              }
    142            }
    143            if (anchor_block1 != INVALID_BLOCK) {
    144              anchor_block = anchor_block1;
    145              anchor_next_page = anchor_page1 + 1;
    146              ret = STATUS_SUCCESS;
    147            } else {
    148              ret = STATUS_FAILURE;
    149            }
    150            if (ret == STATUS_SUCCESS) {
    151              if (anchor_table.total_data_block == INVALID_BLOCK
    152                  || anchor_table.version != ANCHOR_VERSION
    153                  || memcmp(anchor_table.oath, ANCHOR_OATH, 11) != 0) {
    154                /* just a valid bad block table */
    155                ret = STATUS_FAILURE;
    156              }
    157            }
    158            return ret;
    159          }
    160          
    161          void ANCHOR_LogBadBlock(PHY_BLOCK block) {
    162            UINT32 i;
    163          
    164            for (i = 0; i < ANCHOR_BADBLOCK_COUNT; i++) {
    165              if (anchor_table.bad_block_table[i] == INVALID_BLOCK) {
    166                anchor_table.bad_block_table[i] = block;
    167                break;
    168              }
    169              if (anchor_table.bad_block_table[i] == block) {
    170                break;
    171              }
    172            }
    173            return;
    174          }
    175          
    176          BOOL ANCHOR_IsBadBlock(PHY_BLOCK block) {
    177            UINT32 i;
    178            BOOL ret = FALSE;
    179          
    180            for (i = 0; i < ANCHOR_BADBLOCK_COUNT; i++) {
    181              if (anchor_table.bad_block_table[i] == block) {
    182                ret = TRUE;
    183                break;
    184              }
    185            }
    186          
    187            return ret;
    188          
    189          }
    190          
    191          STATUS ANCHOR_Update() {
    192            STATUS ret = STATUS_FAILURE;
    193            BOOL anchor_reclaimed = FALSE;
    194          
    195            while (ret != STATUS_SUCCESS) {
    196              if (anchor_next_page == PAGE_PER_PHY_BLOCK) {
    197                /* reclaim anchor block, fill new plr info data */
    198                anchor_table.previous_anchor_block = anchor_block;
    199                ret = anchor_find_next_block(&anchor_block);
    200                if (ret == STATUS_SUCCESS) {
    201                  anchor_next_page = 0;
    202                  anchor_reclaimed = TRUE;
    203                } else {
    204                  break;
    205                }
    206              }
    207              /* write anchor table */
    208              ret = TABLE_Write(anchor_block, anchor_next_page, &anchor_table);
    209              if (ret == STATUS_SUCCESS) {
    210                if (anchor_reclaimed == TRUE) {
    211                  /* ERASE the pervious anchor table block */
    212                  (void) MTD_Erase(anchor_table.previous_anchor_block);
    213                }
    214                anchor_next_page++;
    215              } else if (ret == STATUS_BADBLOCK) {
    216                /* handle bad block in anchor */
    217                anchor_next_page = PAGE_PER_PHY_BLOCK;
    218              }
    219            }
    220            return ret;
    221          }
    222          
    223          void ANCHOR_IndexReclaim(PHY_BLOCK index_current_block,
    224                                   ERASE_COUNT index_current_ec, PHY_BLOCK new_itb,
    225                                   ERASE_COUNT new_itb_ec) {
    226            anchor_table.index_new_block = new_itb;
    227            anchor_table.index_new_ec = new_itb_ec;
    228            anchor_table.index_old_block = index_current_block;
    229            anchor_table.index_old_ec = index_current_ec;
    230          }
    231          
    232          static STATUS anchor_find_next_block(PHY_BLOCK* current_block) {
    233            STATUS ret = STATUS_SUCCESS;
    234            PHY_BLOCK next_block = *current_block;
    235          
    236            do {
    237              next_block = next_block + 1;
    238              if (next_block > ANCHOR_LAST_BLOCK) {
    239                next_block = ANCHOR_FIRST_BLOCK;
    240              }
    241          
    242              /* return the next non-bad block in anchor blocks */
    243              if (ANCHOR_IsBadBlock(next_block) == FALSE) {
    244                ret = MTD_Erase(next_block);
    245                if (ret != STATUS_SUCCESS) {
    246                  /* mark bad block */
    247                  ANCHOR_LogBadBlock(next_block);
    248                }
    249              } else {
    250                ret = STATUS_BADBLOCK;
    251              }
    252            } while (ret != STATUS_SUCCESS && next_block != *current_block);
    253          
    254            if (next_block != *current_block) {
    255              *current_block = next_block;
    256            } else {
    257              ret = STATUS_FAILURE;
    258            }
    259          
    260            return ret;
    261          }
    262            
    263          //jsj 耶紗蝕兵
    264          void ANCHOR_Format_Clean() {
    265            PHY_BLOCK b;
    266            STATUS ret = STATUS_SUCCESS;
    267            /* ERASE all anchor blocks */
    268            for (b = ANCHOR_FIRST_BLOCK; b <= ANCHOR_LAST_BLOCK; b++) 
    269            {
    270              //uart_printf("%s Erasing anchor block %d\n", __func__, b);
    271              ret = MTD_Erase(b);
    272              if (ret != STATUS_SUCCESS) {
    273                //uart_printf("%s anchor block %d might be bad\n", __func__, b);
    274              }
    275            }
    276          }    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ANCHOR_Format
         8   -> ANCHOR_IsBadBlock
         8   -> ANCHOR_LogBadBlock
         8   -> ANCHOR_Update
         8   -> MTD_Erase
         8   -> __aeabi_memcpy
       8   ANCHOR_Format_Clean
         8   -> MTD_Erase
       4   ANCHOR_IndexReclaim
      32   ANCHOR_Init
        32   -> ANCHOR_LogBadBlock
        32   -> MTD_Erase
        32   -> TABLE_Read
        32   -> __aeabi_memset
        32   -> memcmp
       8   ANCHOR_IsBadBlock
       4   ANCHOR_LogBadBlock
      16   ANCHOR_Update
        16   -> MTD_Erase
        16   -> TABLE_Write
        16   -> anchor_find_next_block
      16   anchor_find_next_block
        16   -> ANCHOR_IsBadBlock
        16   -> ANCHOR_LogBadBlock
        16   -> MTD_Erase


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      12  ?_0
      96  ANCHOR_Format
      22  ANCHOR_Format_Clean
      22  ANCHOR_IndexReclaim
     252  ANCHOR_Init
      38  ANCHOR_IsBadBlock
      62  ANCHOR_LogBadBlock
     126  ANCHOR_Update
       4  anchor_block
      86  anchor_find_next_block
       4  anchor_next_page
    2048  anchor_table

 
 2 056 bytes in section .bss
    12 bytes in section .rodata
   728 bytes in section .text
 
   728 bytes of CODE  memory
    12 bytes of CONST memory
 2 056 bytes of DATA  memory

Errors: none
Warnings: none
