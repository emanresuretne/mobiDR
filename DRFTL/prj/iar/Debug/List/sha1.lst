###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        19/Jan/2021  21:39:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\core\ftl\sha1.c
#    Command line =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\core\ftl\sha1.c
#        -D BOOT_LEVEL_2 -lcN
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\List
#        -o
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "D:\Program Files\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\bsp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\csp\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\lib\
#        -I
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\List\sha1.lst
#    Object file  =  
#        C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\prj\iar\Debug\Obj\sha1.o
#
###############################################################################

C:\Users\wen\Desktop\backup_firm_version2\nsac-hiftl！2016.4.6\nsac-hiftl\core\ftl\sha1.c
      1          /*******************************************************************************
      2           * Teeny SHA-1
      3           *
      4           * The below sha1digest() calculates a SHA-1 hash value for a
      5           * specified data buffer and generates a hex representation of the
      6           * result.  This implementation is a re-forming of the SHA-1 code at
      7           * https://github.com/jinqiangshou/EncryptionLibrary.
      8           *
      9           * Copyright (c) 2017 CTrabant
     10           *
     11           * License: MIT, see included LICENSE file for details.
     12           *
     13           * To use the sha1digest() function either copy it into an existing
     14           * project source code file or include this file in a project and put
     15           * the declaration (example below) in the sources files where needed.
     16           ******************************************************************************/
     17          
     18          #include <stdio.h>
     19          #include <stdint.h>
     20          #include <stdlib.h>
     21          #include <string.h>
     22          
     23          
     24          /* Declaration:
     25          extern int sha1digest(uint8_t *digest, char *hexdigest, const uint8_t *data, size_t databytes);
     26          */
     27          
     28          /*******************************************************************************
     29           * sha1digest: https://github.com/CTrabant/teeny-sha1
     30           *
     31           * Calculate the SHA-1 value for supplied data buffer and generate a
     32           * text representation in hexadecimal.
     33           *
     34           * Based on https://github.com/jinqiangshou/EncryptionLibrary, credit
     35           * goes to @jinqiangshou, all new bugs are mine.
     36           *
     37           * @input:
     38           *    data      -- data to be hashed
     39           *    databytes -- bytes in data buffer to be hashed
     40           *
     41           * @output:
     42           *    digest    -- the result, MUST be at least 20 bytes
     43           *    hexdigest -- the result in hex, MUST be at least 41 bytes
     44           *
     45           * At least one of the output buffers must be supplied.  The other, if not 
     46           * desired, may be set to NULL.
     47           *
     48           * @return: 0 on success and non-zero on error.
     49           ******************************************************************************/
     50          int
     51          sha1digest(uint8_t *digest, const uint8_t *data, size_t databytes)
     52          {
     53          #define SHA1ROTATELEFT(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))
     54          
     55            uint32_t W[80];
     56            uint32_t H[] = {0x67452301,
     57                            0xEFCDAB89,
     58                            0x98BADCFE,
     59                            0x10325476,
     60                            0xC3D2E1F0};
     61            uint32_t a;
     62            uint32_t b;
     63            uint32_t c;
     64            uint32_t d;
     65            uint32_t e;
     66            uint32_t f = 0;
     67            uint32_t k = 0;
     68          
     69            uint32_t idx;
     70            uint32_t lidx;
     71            uint32_t widx;
     72            uint32_t didx = 0;
     73          
     74            int32_t wcount;
     75            uint32_t temp;
     76            uint64_t databits = ((uint64_t)databytes) * 8;
     77            uint32_t loopcount = (databytes + 8) / 64 + 1;
     78            uint32_t tailbytes = 64 * loopcount - databytes;
     79            uint8_t datatail[128] = {0};
     80          
     81            if (!digest)
     82              return -1;
     83          
     84            if (!data)
     85              return -1;
     86          
     87            /* Pre-processing of data tail (includes padding to fill out 512-bit chunk):
     88               Add bit '1' to end of message (big-endian)
     89               Add 64-bit message length in bits at very end (big-endian) */
     90            datatail[0] = 0x80;
     91            datatail[tailbytes - 8] = (uint8_t) (databits >> 56 & 0xFF);
     92            datatail[tailbytes - 7] = (uint8_t) (databits >> 48 & 0xFF);
     93            datatail[tailbytes - 6] = (uint8_t) (databits >> 40 & 0xFF);
     94            datatail[tailbytes - 5] = (uint8_t) (databits >> 32 & 0xFF);
     95            datatail[tailbytes - 4] = (uint8_t) (databits >> 24 & 0xFF);
     96            datatail[tailbytes - 3] = (uint8_t) (databits >> 16 & 0xFF);
     97            datatail[tailbytes - 2] = (uint8_t) (databits >> 8 & 0xFF);
     98            datatail[tailbytes - 1] = (uint8_t) (databits >> 0 & 0xFF);
     99          
    100            /* Process each 512-bit chunk */
    101            for (lidx = 0; lidx < loopcount; lidx++)
    102            {
    103              /* Compute all elements in W */
    104              memset (W, 0, 80 * sizeof (uint32_t));
    105          
    106              /* Break 512-bit chunk into sixteen 32-bit, big endian words */
    107              for (widx = 0; widx <= 15; widx++)
    108              {
    109                wcount = 24;
    110          
    111                /* Copy byte-per byte from specified buffer */
    112                while (didx < databytes && wcount >= 0)
    113                {
    114                  W[widx] += (((uint32_t)data[didx]) << wcount);
    115                  didx++;
    116                  wcount -= 8;
    117                }
    118                /* Fill out W with padding as needed */
    119                while (wcount >= 0)
    120                {
    121                  W[widx] += (((uint32_t)datatail[didx - databytes]) << wcount);
    122                  didx++;
    123                  wcount -= 8;
    124                }
    125              }
    126          
    127              /* Extend the sixteen 32-bit words into eighty 32-bit words, with potential optimization from:
    128                 "Improving the Performance of the Secure Hash Algorithm (SHA-1)" by Max Locktyukhin */
    129              for (widx = 16; widx <= 31; widx++)
    130              {
    131                W[widx] = SHA1ROTATELEFT ((W[widx - 3] ^ W[widx - 8] ^ W[widx - 14] ^ W[widx - 16]), 1);
    132              }
    133              for (widx = 32; widx <= 79; widx++)
    134              {
    135                W[widx] = SHA1ROTATELEFT ((W[widx - 6] ^ W[widx - 16] ^ W[widx - 28] ^ W[widx - 32]), 2);
    136              }
    137          
    138              /* Main loop */
    139              a = H[0];
    140              b = H[1];
    141              c = H[2];
    142              d = H[3];
    143              e = H[4];
    144          
    145              for (idx = 0; idx <= 79; idx++)
    146              {
    147                if (idx <= 19)
    148                {
    149                  f = (b & c) | ((~b) & d);
    150                  k = 0x5A827999;
    151                }
    152                else if (idx >= 20 && idx <= 39)
    153                {
    154                  f = b ^ c ^ d;
    155                  k = 0x6ED9EBA1;
    156                }
    157                else if (idx >= 40 && idx <= 59)
    158                {
    159                  f = (b & c) | (b & d) | (c & d);
    160                  k = 0x8F1BBCDC;
    161                }
    162                else if (idx >= 60 && idx <= 79)
    163                {
    164                  f = b ^ c ^ d;
    165                  k = 0xCA62C1D6;
    166                }
    167                temp = SHA1ROTATELEFT (a, 5) + f + e + k + W[idx];
    168                e = d;
    169                d = c;
    170                c = SHA1ROTATELEFT (b, 30);
    171                b = a;
    172                a = temp;
    173              }
    174          
    175              H[0] += a;
    176              H[1] += b;
    177              H[2] += c;
    178              H[3] += d;
    179              H[4] += e;
    180            }
    181          
    182            /* Store binary digest in supplied buffer */
    183            if (digest)
    184            {
    185              for (idx = 0; idx < 5; idx++)
    186              {
    187                digest[idx * 4 + 0] = (uint8_t) (H[idx] >> 24);
    188                digest[idx * 4 + 1] = (uint8_t) (H[idx] >> 16);
    189                digest[idx * 4 + 2] = (uint8_t) (H[idx] >> 8);
    190                digest[idx * 4 + 3] = (uint8_t) (H[idx]);
    191              }
    192            }
    193          
    194            return 0;
    195          }  /* End of sha1digest() */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     528   sha1digest
       528   -> __aeabi_memclr4
       528   -> __aeabi_memcpy4
       528   -> __aeabi_memset
       528 __aeabi_lmul


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?_0
     128  ?_1
     916  sha1digest

 
 148 bytes in section .rodata
 916 bytes in section .text
 
 916 bytes of CODE  memory
 148 bytes of CONST memory

Errors: none
Warnings: none
